/**/#include <LiquidCrystal.h>LiquidCrystal lcd(12, 11, 5, 4, 3, 2);int screen = 0;int rightSwitchState = 0;int leftSwitchState = 0;char byte1[] = "00000000";char byte2[] = "00000000";String solution = "";int byte1index = 0;int byte2index = 0;void setup() {  // Initialize buttons  pinMode(6, INPUT);    // Initalize screen size  lcd.begin(16, 2);}void loop() {  // Delay so that the screen doesn't stutter  delay(500);  // Read the pins  rightSwitchState = digitalRead(7);  leftSwitchState = digitalRead(6);  // Show the home screen when screen = 0  if (screen == 0) {    // Clear and start on first line    lcd.clear();    lcd.setCursor(0, 0);    lcd.println("Hello!");        // If both buttons are pressed, increment screen    if (rightSwitchState == HIGH && leftSwitchState == HIGH) {      screen++;    }  // Byte 1 screen  } else if (screen == 1) {    lcd.clear();    lcd.setCursor(0, 0);    lcd.println("Byte 1:");    lcd.setCursor(0, 1);    // Print the entire byte first    lcd.println(byte1);    // If left button is pressed, change the current byteindex to '1'    // Then increment the index by 1    if (leftSwitchState == HIGH) {      switch (byte1index) {        case 0:           byte1[byte1index] = '1';          byte1index++;          break;                  case 1:           byte1[byte1index] = '1';          byte1index++;          break;                  case 2:           byte1[byte1index] = '1';          byte1index++;          break;                  case 3:           byte1[byte1index] = '1';          byte1index++;          break;                  case 4:           byte1[byte1index] = '1';          byte1index++;          break;                  case 5:           byte1[byte1index] = '1';          byte1index++;          break;                  case 6:           byte1[byte1index] = '1';          byte1index++;          break;                  // On last case, reset the index and increment the screen        case 7:           byte1[byte1index] = '1';          byte1index = 0;          screen++;          break;      }    // If right button is pressed, skip the current index    } else if (rightSwitchState == HIGH) {        switch (byte1index) {          case 0:             byte1index++;            break;                      case 1:             byte1index++;            break;                      case 2:             byte1index++;            break;                      case 3:             byte1index++;            break;                      case 4:             byte1index++;            break;                      case 5:             byte1index++;            break;                      case 6:             byte1index++;            break;                      // On last index, reset the index and increment the screen          case 7:             byte1index = 0;            screen++;            break;        }      }      // Byte 2 screen  } else if (screen == 2) {    lcd.clear();    lcd.setCursor(0, 0);    lcd.println(byte2);    // If left button is pressed, change the current byteindex to '1'    // Then increment the index by 1    if (leftSwitchState == HIGH) {      switch (byte2index) {        case 0:           byte2[byte2index] = '1';          byte2index++;          break;                  case 1:           byte2[byte2index] = '1';          byte2index++;          break;                  case 2:           byte2[byte2index] = '1';          byte2index++;          break;                  case 3:           byte2[byte2index] = '1';          byte2index++;          break;                  case 4:           byte2[byte2index] = '1';          byte2index++;          break;                  case 5:           byte2[byte2index] = '1';          byte2index++;          break;                  case 6:           byte2[byte2index] = '1';          byte2index++;          break;                  // On last index, reset the index and increment the screen        case 7:           byte2[byte2index] = '1';          byte2index = 0;          screen++;          break;      }    // If right button is pressed, skip the current index    } else if (rightSwitchState == HIGH) {        switch (byte2index) {          case 0:             byte2index++;            break;                      case 1:             byte2index++;            break;                      case 2:             byte2index++;            break;                      case 3:             byte2index++;            break;                      case 4:             byte2index++;            break;                      case 5:             byte2index++;            break;                      case 6:             byte2index++;            break;                      // On last index, reset the index and increment the screen          case 7:             byte2index = 0;            screen++;            break;        }      }  // Solution screen  } else if (screen == 3) {    lcd.clear();    lcd.setCursor(0, 0);    lcd.println("Solution:");    lcd.setCursor(0, 1);    solution = addBinary(byte1, byte2);    lcd.println(solution);    // If both buttons are pressed, increment screen    if (rightSwitchState == HIGH && leftSwitchState == HIGH) {      screen = 0;    }  }}// This function will add 2 binary strings and produce the result as a StringString addBinary(String a, String b) {     String result = ""; // Initialize result     int s = 0;          // Initialize digit sum       // Traverse both strings starting from last characters     int i = a.length() - 1;    int j = b.length() - 1;     while (i >= 0 || j >= 0 || s == 1)     {         // Compute sum of last digits and carry         s += ((i >= 0)? a[i] - '0': 0);         s += ((j >= 0)? b[j] - '0': 0);           // If current digit sum is 1 or 3, add 1 to result         result = char(s % 2 + '0') + result;           // Compute carry         s /= 2;           // Move to next digits         i--; j--;     }     return result; } 